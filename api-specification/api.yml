openapi: "3.0.2"
info:
  title: Vant API
  version: "1.0"
servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://harrystation.de:8000/api/v1
    description: Production server
components:
  securitySchemes:
    api_key: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: x-api-key # name of the header, query parameter or cookie
security:
  - api_key: []
paths:
  /records/latest:
    get:
      tags: [records]
      summary: Get the most recently measured weather data
      description: Returns the most recently measured weather data, which is automatically converted into the desired units. If no units are passed the configured default units will be used. Your api key needs read access.
      parameters:
        - in: query
          name: rain
          schema:
            $ref: "./units.yml#/RainUnit"
        - in: query
          name: wind
          schema:
            $ref: "./units.yml#/WindUnit"
        - in: query
          name: pressure
          schema:
            $ref: "./units.yml#/PressureUnit"
        - in: query
          name: solarRadiation
          schema:
            $ref: "./units.yml#/SolarRadiationUnit"
        - in: query
          name: temperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: leafTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilMoisture
          schema:
            $ref: "./units.yml#/SoilMoistureUnit"
        - in: query
          name: humidity
          schema:
            $ref: "./units.yml#/HumidityUnit"
        - in: query
          name: evoTranspiration
          schema:
            $ref: "./units.yml#/RainUnit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  latestRecord:
                    $ref: "./record.yml#/Record"
        "400":
          description: Bad Request. Probably the query parameters (unit settings) are invalid.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "403":
          description: Access denied. Your api key is missing, invalid or has no read access.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "503":
          description: Service Unavailable. Happens if no weather data hasn't been uploaded.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "500":
          description: Internal server error. Multiple reasons are possible. Probably the database connection failed.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
    post:
      tags: [records]
      summary: Add a new weather record
      description: Adds a new weather record. The api processes the record in multiple ways (e.g. to update the highs and lows). One have to use the configured units. The used api key needs write access.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./record.yml#/Record"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
        "400":
          description: Bad Request. Probably the sent weather data is invalid.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "403":
          description: Access denied. Your api key is missing, invalid or has no write access.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "500":
          description: Internal server error. Multiple reasons are possible. Probably the database connection failed.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
  /records:
    get:
      tags: [records]
      summary: Get all records (in the specified interval)
      description: Get all records (in the specified interval). They get automatically converted into the desired units. If no units are passed the configured default units will be used. Your api key needs read access.
      parameters:
        - in: query
          name: from
          description: Inclusive start time of the interval
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-07-21T17:32:28Z"
        - in: query
          name: to
          description: Inclusive end time of the interval
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-07-21T17:32:28Z"
        - in: query
          name: rain
          schema:
            $ref: "./units.yml#/RainUnit"
        - in: query
          name: wind
          schema:
            $ref: "./units.yml#/WindUnit"
        - in: query
          name: pressure
          schema:
            $ref: "./units.yml#/PressureUnit"
        - in: query
          name: solarRadiation
          schema:
            $ref: "./units.yml#/SolarRadiationUnit"
        - in: query
          name: temperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: leafTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilMoisture
          schema:
            $ref: "./units.yml#/SoilMoistureUnit"
        - in: query
          name: humidity
          schema:
            $ref: "./units.yml#/HumidityUnit"
        - in: query
          name: evoTranspiration
          schema:
            $ref: "./units.yml#/RainUnit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  records:
                    $ref: "./records.yml#/Records"
        "400":
          description: Bad Request. Probably the query parameters (unit settings) are invalid.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "403":
          description: Access denied. Your api key is missing, invalid or has no read access.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "503":
          description: Service Unavailable. Happens if no weather data hasn't been uploaded.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "500":
          description: Internal server error. Multiple reasons are possible. Probably the database connection failed.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
  /records/{element}/latest:
    get:
      tags: [records]
      summary: Get the most recent measured value of a weather element
      description: Returns the most recent measured value of a weather element (and the time it has been measured). Your api key needs read access.
      parameters:
        - in: path
          name: element
          description: Your desired weather element
          required: true
          schema:
            $ref: "./elements.yml#/Element"
        - in: query
          name: rain
          schema:
            $ref: "./units.yml#/RainUnit"
        - in: query
          name: wind
          schema:
            $ref: "./units.yml#/WindUnit"
        - in: query
          name: pressure
          schema:
            $ref: "./units.yml#/PressureUnit"
        - in: query
          name: solarRadiation
          schema:
            $ref: "./units.yml#/SolarRadiationUnit"
        - in: query
          name: temperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: leafTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilMoisture
          schema:
            $ref: "./units.yml#/SoilMoistureUnit"
        - in: query
          name: humidity
          schema:
            $ref: "./units.yml#/HumidityUnit"
        - in: query
          name: evoTranspiration
          schema:
            $ref: "./units.yml#/RainUnit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  latestRecord:
                    type: object
                    properties:
                      value:
                        example: 5.12
                      time:
                        type: string
                        example: "2023-08-31T12:23:01Z"

        "400":
          description: Bad Request. Probably the query parameters (unit settings) are invalid.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "403":
          description: Access denied. Your api key is missing, invalid or has no read access.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "503":
          description: Service Unavailable. Happens if no weather data hasn't been uploaded.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "500":
          description: Internal server error. Multiple reasons are possible. Probably the database connection failed.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
  /records/{element}:
    get:
      tags: [records]
      summary: Get all records of a weather element (in the specified interval)
      description: Returns all measured values of a weather element in the given interval, which is automatically converted into the desired units. If no units are passed the configured will be used. Your api key needs read access.
      parameters:
        - in: query
          name: rain
          schema:
            $ref: "./units.yml#/RainUnit"
        - in: query
          name: wind
          schema:
            $ref: "./units.yml#/WindUnit"
        - in: query
          name: pressure
          schema:
            $ref: "./units.yml#/PressureUnit"
        - in: query
          name: solarRadiation
          schema:
            $ref: "./units.yml#/SolarRadiationUnit"
        - in: query
          name: temperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: leafTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilMoisture
          schema:
            $ref: "./units.yml#/SoilMoistureUnit"
        - in: query
          name: humidity
          schema:
            $ref: "./units.yml#/HumidityUnit"
        - in: query
          name: evoTranspiration
          schema:
            $ref: "./units.yml#/RainUnit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  records:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          example: 12.89
                        time:
                          type: string
                          example: "2023-08-31T12:23:01Z"

        "400":
          description: Bad Request. Probably the query parameters (unit settings) are invalid.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "403":
          description: Access denied. Your api key is missing, invalid or has no read access.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "503":
          description: Service Unavailable. Happens if no weather data hasn't been uploaded.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "500":
          description: Internal server error. Multiple reasons are possible. Probably the database connection failed.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
  /dwd-warnings:
    get:
      tags: [dwd-warnings]
      summary: Get all dwd warnings for the configured region
      description: Gets all dwd warnings for the configured region.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  time:
                    $ref: "./time.yml#/DateTime"
                  regionName:
                    type: string
                    example: "Kreis Ahrweiler"
                  warnings:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: number
                          example: 1
                        level:
                          type: number
                          example: 2
                        start:
                          $ref: "./time.yml#/DateTime"
                        end:
                          $ref: "./time.yml#/DateTime"
                        event:
                          type: string
                          enum: [WINDBÖEN]
                          example: "WINDBÖEN"
                        headline:
                          type: string
                          example: "Amtliche WARNUNG vor WINDBÖEN"
                        instruction:
                          type: string
                          example: ""
                        description:
                          type: string
                          example: "Es treten oberhalb 400 m Windböen mit Geschwindigkeiten um 60 km/h (17 m/s, 33 kn, Bft 7) aus südwestlicher Richtung auf."
                        altitudeStart:
                          type: number
                          nullable: true
                          example: 400
                        altitudeEnd:
                          type: number
                          nullable: true
                          example: null
  /meteomatics/live:
    get:
      tags: [meteomatics]
      summary: Get the live weather with a small forecast from the meteomatics api
      description: Gets the live weather (temperature, conditions) and a 24h hourly forecast (temperature, conditions, rain) from the meteomatics api. The weather data gets automatically converted into the desired units. If no units are passed the configured default units will be used. Your api key needs read access.
      parameters:
        - in: query
          name: rain
          schema:
            $ref: "./units.yml#/RainUnit"
        - in: query
          name: wind
          schema:
            $ref: "./units.yml#/WindUnit"
        - in: query
          name: pressure
          schema:
            $ref: "./units.yml#/PressureUnit"
        - in: query
          name: solarRadiation
          schema:
            $ref: "./units.yml#/SolarRadiationUnit"
        - in: query
          name: temperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: leafTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilMoisture
          schema:
            $ref: "./units.yml#/SoilMoistureUnit"
        - in: query
          name: humidity
          schema:
            $ref: "./units.yml#/HumidityUnit"
        - in: query
          name: evoTranspiration
          schema:
            $ref: "./units.yml#/RainUnit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  live:
                    type: object
                    properties:
                      temp:
                        type: number
                        example: 23.1
                      conditions:
                        type: string
                        enum: [blabla]
                  forecast:
                    type: array
                    minItems: 24
                    maxItems: 24
                    items:
                      type: object
                      properties:
                        time:
                          $ref: "./time.yml#/DateTime"
                        temp:
                          type: number
                          example: 23.4
                        rain:
                          type: number
                          example: 0.4
                        conditions:
                          $ref: "./meteomatics.yml#/Conditions"
  /meteomatics/forecast:
    get:
      tags: [meteomatics]
      summary: Get the 10 day forecast from the meteomatics api
      description: Gets the forecast from the meteomatics api. The weather data gets automatically converted into the desired units. If no units are passed the configured default units will be used. Your api key needs read access.
      parameters:
        - in: query
          name: rain
          schema:
            $ref: "./units.yml#/RainUnit"
        - in: query
          name: wind
          schema:
            $ref: "./units.yml#/WindUnit"
        - in: query
          name: pressure
          schema:
            $ref: "./units.yml#/PressureUnit"
        - in: query
          name: solarRadiation
          schema:
            $ref: "./units.yml#/SolarRadiationUnit"
        - in: query
          name: temperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: leafTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilTemperature
          schema:
            $ref: "./units.yml#/TemperatureUnit"
        - in: query
          name: soilMoisture
          schema:
            $ref: "./units.yml#/SoilMoistureUnit"
        - in: query
          name: humidity
          schema:
            $ref: "./units.yml#/HumidityUnit"
        - in: query
          name: evoTranspiration
          schema:
            $ref: "./units.yml#/RainUnit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  forecast:
                    type: array
                    minItems: 10
                    maxItems: 10
                    items:
                      type: object
                      properties:
                        date:
                          $ref: "./time.yml#/Date"
                        conditions:
                          $ref: "./meteomatics.yml#/Conditions"
                        tempMin:
                          type: number
                        tempMax:
                          type: number
                        rain:
                          type: number
                        pressure:
                          type: number
                        windDir:
                          type: number
                          minimum: 1
                          maximum: 360
                        windGust:
                          type: number
                        details:
                          type: object
                          properties:
                            morning:
                              type: object
                              properties:
                                conditions:
                                  $ref: "./meteomatics.yml#/Conditions"
                                tempMin:
                                  type: number
                                tempMax:
                                  type: number
                                rain:
                                  type: number
                                pressure:
                                  type: number
                                windDir:
                                  type: number
                                  minimum: 1
                                  maximum: 360
                                windGust:
                                  type: number
                            midday:
                              type: object
                              properties:
                                conditions:
                                  $ref: "./meteomatics.yml#/Conditions"
                                tempMin:
                                  type: number
                                tempMax:
                                  type: number
                                rain:
                                  type: number
                                pressure:
                                  type: number
                                windDir:
                                  type: number
                                  minimum: 1
                                  maximum: 360
                                windGust:
                                  type: number
                            evening:
                              type: object
                              properties:
                                conditions:
                                  $ref: "./meteomatics.yml#/Conditions"
                                tempMin:
                                  type: number
                                tempMax:
                                  type: number
                                rain:
                                  type: number
                                pressure:
                                  type: number
                                windDir:
                                  type: number
                                  minimum: 1
                                  maximum: 360
                                windGust:
                                  type: number
                            night:
                              type: object
                              properties:
                                conditions:
                                  $ref: "./meteomatics.yml#/Conditions"
                                tempMin:
                                  type: number
                                tempMax:
                                  type: number
                                rain:
                                  type: number
                                pressure:
                                  type: number
                                windDir:
                                  type: number
                                  minimum: 1
                                  maximum: 360
                                windGust:
                                  type: number
                      example:
                        date: 2023-11-06
                        conditions: snow-shower
                        tempMin: -5
                        tempMax: 1
                        rain: 3
                        pressure: 1001.3
                        windDir: 5
                        windGust: 12.4
                        morning:
                          - conditions: snow-shower
                            tempMin: -3
                            tempMax: -2
                            rain: 3
                            pressure: 1000
                            windDir: 3
                            windGust: 12.4
                        midday:
                          - conditions: light-clouds
                            tempMin: -2
                            tempMax: 1
                            rain: 0
                            pressure: 1001.2
                            windDir: 4
                            windGust: 7.3
                        evening:
                          - conditions: clear-sky
                            tempMin: -3
                            tempMax: 1
                            rain: 0
                            pressure: 1001.2
                            windDir: 6
                            windGust: 2.3
                        night:
                          - conditions: clear-sky
                            tempMin: -5
                            tempMax: -3
                            rain: 0
                            pressure: 1003.4
                            windDir: 7
                            windGust: 1.0
  /config:
    put:
      tags: [config]
      summary: Update the vant-environment configuration
      description: Updates the vant-environment configuration. One needs an admin api key.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./configuration.yml#/Settings"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]

    get:
      tags: [config]
      summary: Get the vant-environment configuration
      description: Gets the current vant-environment configuration. Requires an admin or write api key.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  configuration:
                    $ref: "./configuration.yml#/Settings"
  /config/generate-api-key:
    post:
      tags: [config]
      summary: Generate a new api key
      description: Returns a new api key. You need an admin api key to create new api keys.
      parameters:
        - in: query
          name: role
          description: The role (access privileges) of the generated api key.
          schema:
            type: string
            enum: [read, write, readwrite, admin]
      responses:
        "201":
          description: The API key was generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                    example: true
                  key:
                    type: string
                    format: uuid
                    example: f9484f84-18c2-4318-9ee1-6d1f8fc87dba
                  role:
                    type: string
                    enum: [read, write, readwrite, admin]
                    example: readwrite
                  generated:
                    type: string
                    example: 2023-08-31T12:23:01Z
        "400":
          description: Bad Request. Probably your role query parameter is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "403":
          description: Access denied. Your api key is missing, invalid or has no admin access.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
        "500":
          description: Internal server error. Multiple reasons are possible. Probably the database connection failed.
          content:
            application/json:
              schema:
                $ref: "./error.yml#/Error"
  /high-low/alltime:
    get:
      tags: [high-low]
      summary: Get alltime highs and lows
      description: Gets the alltime highs and lows. They get automatically converted into the desired units. If no units are passed the configured default units will be used. Your api key needs read access.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum: [true]
                  highsAndLows:
                    $ref: "./highsAndLows.yml#/AlltimeHighsAndLows"
